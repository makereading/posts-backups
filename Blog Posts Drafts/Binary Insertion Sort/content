GFG:
====

Binary Insertion Sort uses binary search to find the proper location to insert the selected item at each iteration. 

Wikipedia:
==========

Binary insertion sort employs a binary search to determine the correct location to insert new elements, and therefore performs ⌈log2 n⌉ comparisons in the worst case, which is O(n log n). The algorithm as a whole still has a running time of O(n2) on average because of the series of swaps required for each insertion. 


Tutorials Point:
================

Binary Insertion sort is a special type up of Insertion sort which uses binary search algorithm to find out the correct position of the inserted element in the array.

Insertion sort is sorting technique that works by finding the correct position of the element in the array and then inserting it into its correct position.

Binary search is searching technique that works by finding the middle of the array for finding the element.

As the complexity of binary search is of logarithmic order, the searching algorithm’s time complexity will also decrease to of logarithmic order.

Implementation of binary Insertion sort. this program is a simple Insertion sort program but instead of the standard searching technique binary search is used.


Opengenus:
==========

Binary search is used to reduce the number of comparisons in Insertion sort. This modification is known as Binary Insertion Sort.

Binary Insertion Sort use binary search to find the proper location to insert the selected item at each iteration. In insertion sort, it takes O(i) (at ith iteration) in worst case. Using binary search, it is reduced to O(log i).
Complexity

    Worst case time complexity: Θ(N log N) comparisons and swaps
    Average case time complexity: Θ(N log N) comparisons and swaps
    Best case time complexity: Θ(N) comparisons and Θ(1) swaps
    Space complexity: Θ(1).




